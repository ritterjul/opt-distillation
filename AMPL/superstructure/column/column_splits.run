#calculate minimum vapour flow for fixed splits and fixed solver, mixture, model, column size and initial values

#choose solver (find&replace)
reset;
option solver 'kestrel';
option kestrel_options 'solver=KNITRO';

cd 'C:\Users\Juliane\Documents\Studium\Masterarbeit\Code\AMPL\superstructure\column';

#choose model (find&replace)
model 'column_rigorous.mod';
cd 'C:\Users\Juliane\Documents\Studium\Masterarbeit\Code\AMPL\properties\rigorous';

#choose mixture (comment&uncomment, then find&replace)
#/*
#Grossmann 2 - A 
data;
param  Fall := 100;
param xF := 1 0.3 2 0.4 3 0.3;
data 'BenzeneTolueneEthylbenzene.dat';
#data 'TolueneEthylbenzeneStyrene.dat';
#*/

/*
#Grossmann 3 - B
data;
param Fall := 200; 
param xF := 1 0.3 2 0.4 3 0.3;
#data 'Iso_1Propanol1_Butanol.dat';
data 'Iso_PropanolIso_1Butanol.dat';
*/

/*
#Grossmann 1 - C
data;
param Fall := 200;
param xF := 1 0.3 2 0.4 3 0.3;
#data 'HeptaneOctaneDecane.dat';
data 'OctaneNonaneDecane.dat';
*/

#choose column size (comment&uncomment, then find&replace)
data;
#normal
param NS :=	10;	 
param fn := 5;
#large
#param NS := 30;	 
#param fn := 15;

#fix feed stage
fix {n in Sm diff {fn}} F[n]:= 0;

#choose initial values (mixture, model and size specific) OPTIONAL
cd 'C:\Users\Juliane\Documents\Studium\Masterarbeit\Code\AMPL\superstructure\column\results\start\BenzeneTolueneEthylbenzene\rigorous';
data 'start_normal.dat';

#choose results folder (solver, mixture and model specific)
cd 'C:\Users\Juliane\Documents\Studium\Masterarbeit\Code\AMPL\superstructure\column\results\KNITRO\BenzeneTolueneEthylbenzene\rigorous';

let {j in 1.._nvars} _var[j] := _var[j].init0;
#constrain to first split
redeclare subject to LK: PC*y[NS,1] >= 0.95*Fall*xF[1];
redeclare subject to HK: PR*x[1,2] >= 0.95*Fall*xF[2];
solve;
display solve_message, _varname, _var; > 'Split1_095_normal.out';

redeclare subject to LK: PC*y[NS,1] >= 0.99*Fall*xF[1];
redeclare subject to HK: PR*x[1,2] >= 0.99*Fall*xF[2];
solve;
display solve_message, _varname, _var > 'Split1_099_normal.out';

let {j in 1.._nvars} _var[j] := _var[j].init0;
#constrain to second split
redeclare subject to LK: PC*y[NS,2] >= 0.95*Fall*xF[2];
redeclare subject to HK: PR*x[1,3] >= 0.95*Fall*xF[3];
solve;
display solve_message, _varname, _var > 'Split2_095_normal.out';
redeclare subject to LK: PC*y[NS,2] >= 0.99*Fall*xF[2];
redeclare subject to HK: PR*x[1,3] >= 0.99*Fall*xF[3];
solve;
display solve_message, _varname, _var > 'Split2_099_normal.out';


close;
cd 'C:\Users\Juliane\Documents\Studium\Masterarbeit\Code\AMPL';







